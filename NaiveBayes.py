# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gZzk2A-CfH1v3szrI2cdXsRZJhV0uhWV
"""

import numpy as np
import pandas as pd

data = pd.DataFrame([['sales', '31-35', '46-50', 'senior'],
        ['sales', '26-30', '26-30', 'junior'],
        ['sales', '31-35', '31-35', 'junior'],
        ['systems', '21-25', '46-50', 'junior'],
        ['systems', '31-35', '66-70', 'senior'],
        ['systems', '26-30', '46-50', 'junior'],
        ['systems', '41-45', '66-70', 'senior'],
        ['marketing', '36-40', '46-50', 'senior'],
        ['marketing', '31-35', '41-45', 'junior'],
        ['secretary', '46-50', '36-40', 'senior'],
        ['secretary', '26-30', '26-30', 'junior']],
        index = [1,2,3,4,5,6,7,8,9,10,11],
        columns = ['dept', 'age', 'salary', 'status'])

seniors = 0
juniors = 0

for i in data['status']:
  if i == 'senior':
    seniors = seniors + 1
for i in data['status']:
  if i == 'junior':
    juniors += 1

print("Total Number of Seniors:", seniors)
print("Total Number of Juniors:", juniors)

def laplace_smoothing():
  
  for i in dept_table:
    if i == 'Senior':
      for j in range(len(dept_table)):
        dept_table['Senior'][j] = (dept_table['Senior'][j] + 1/seniors) * seniors / (seniors + len(dept_table))
        dept_table['Junior'][j] = (dept_table['Junior'][j] + 1/juniors) * juniors / (juniors + len(dept_table))
  

  
  for i in age_table:
    if i == 'Senior':
      for j in range(len(dept_table)):
        age_table['Senior'][j] = (age_table['Senior'][j] + 1/seniors) * seniors / (seniors + len(age_table))
        age_table['Junior'][j] = (age_table['Junior'][j] + 1/juniors) * juniors / (juniors + len(age_table))
  

 
  for i in salary_table: 
    if i == 'Senior':
      for j in range(len(salary_table)):
        salary_table['Senior'][j] = (salary_table['Senior'][j] + 1/seniors) * seniors / (seniors + len(salary_table))
        salary_table['Junior'][j] = (salary_table['Junior'][j] + 1/juniors) * juniors / (juniors + len(salary_table))


dept_table = pd.DataFrame([['sales', 1/5, 2/6],
                          ['systems', 2/5, 2/6],
                          ['marketing', 1/5, 1/6],
                          ['secretary', 1/5, 1/5]],
                          columns = ['Dept', 'Senior', 'Junior'])
age_table = pd.DataFrame([['31...35', 2/5, 2/6],
                          ['26...30', 0/5, 3/6],
                          ['21...25', 0/5, 1/6],
                          ['41...45', 1/5, 0/6],
                          ['46...50', 1/5, 0/6]],
                         columns = ['Age', 'Senior', 'Junior'])
salary_table = pd.DataFrame([['46k...50k', 2/5, 2/6],
                             ['26k...30k', 0/5, 2/6],
                             ['31k...35k', 0/5, 1/6],
                             ['66k...70k', 2/5, 0/6],
                             ['41k...45k', 0/5, 1/6]],
                            columns = ['Salary', 'Senior', 'Junior'])


laplace_smoothing()
test_data = ['marketing', '31...35', '46k...50k']

for i in dept_table['Dept']:
  if test_data[0] == i:
    dept_senior = dept_table[dept_table['Dept']==test_data[0]]['Senior']
    dept_junior = dept_table[dept_table['Dept']==test_data[0]]['Junior']

for i in age_table['Age']:
  if test_data[1] == i:
    age_senior = age_table[age_table['Age'] == test_data[1]]['Senior']
    age_junior = age_table[age_table['Age'] == test_data[1]]['Junior']


for i in salary_table['Salary']:
  if test_data[2] == i:
    slry_senior = salary_table[salary_table['Salary'] == test_data[2]]['Senior']
    slry_junior = salary_table[salary_table['Salary'] == test_data[2]]['Junior']


total_senior = float(dept_senior) * float(age_senior) * float(slry_senior) * 5/11
total_junior = float(dept_junior) * float(age_junior) * float(slry_junior) * 6/11



total_prob = ((float(dept_junior)+float(dept_senior))* (float(age_junior)+float(age_senior))* (float(slry_junior)+ float(slry_senior)))
total_sen = total_senior / total_prob
total_jun = total_junior / total_prob


laplace_smoothing()
print("\nAfter Laplace Smoothing: ")
print(total_sen)
print(total_jun)

if total_sen > total_jun:
  print("\nPrediction: Senior")
else:
  print("\nPrediction: Junior") 

#print(list(enumerate(dept_table)))

